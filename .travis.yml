os: linux
dist: bionic
language: python
python:
  - 3.7
git:
  ## depth set to false overrides travis default behavior to use shallow clones
  ## with depth 50 that can cause issues
  ##
  ## ref: https://github.com/jupyterhub/chartpress#shallow-clones
  ##
  depth: false
services:
  - docker

stages:
  - name: test
  - name: publish
    if: tag IS present OR ( branch IN (master) AND type IN (push) )


before_install:
  # Exit immediately if a command exits with a non-zero status.
  - set -e
  - . ci/common


# install - k8s + ready for jupyterhub install
# - 1. Fix docker rebuilding issue
# - 2. Install k8s
# - 3. Install ACME server into k8s (pebble)
# - 4. Install Python dependencies
# - 5. Await readiness
install:
  # Fix to avoid rebuilding images already built
  - remove_docker_mirror_on_travis

  # Setup our k3s based Kubernetes cluster and use its kubectl as well
  - setup_k3s
  - setup_helm
  - helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
  - helm repo update

  # Install a local ACME server
  - helm install pebble jupyterhub/pebble --values dev-config-pebble.yaml

  # Install dependencies for testing
  - pip install --no-cache-dir -r dev-requirements.txt
  - pip freeze

  # Install dependencies for testing with BinderHub running outside the k8s cluster
  # TODO: Make this conditional
  # - sudo apt-get update && sudo apt-get -y install libgnutls28-dev # pycurl dependency
  # - pip install --upgrade pip setuptools
  # - pip install --upgrade . -r helm-chart/images/binderhub/requirements.txt
  # - nvm install 12; nvm use 12
  # - npm install
  # - npm run webpack
  # - pip freeze

  # Pre-install BinderHub
  - await_dns     # part of k3s, jupyterhub needs it while referencing https://pebble/dir
  - await_calico  # installed with setup_k3s, enforces netpol
  - await_pebble  # jupyterhub's autohttps communicates with it as the ACME server
  

after_failure:
  - |
    echo "Failure: showing logs for all pods' containers in the default namespace"
    kubectl get pod --all-namespaces
    for pod in $(kubectl get pod --no-headers | awk '{print $1}'); do
      echo Logs for pod/$pod
      kubectl logs $pod --all-containers || echo 'no logs'
    done
after_success:
  - codecov

env:
  global:
    # k3s versions:  https://github.com/rancher/k3s/releases
    - K3S_VERSION=v1.18.4+k3s1
    # helm versions: https://github.com/helm/helm/releases
    - HELM_VERSION=v3.2.4


jobs:
  ## don't wait for the jobs that are allowed to fail to report success
  ##
  ## ref: https://docs.travis-ci.com/user/customizing-the-build/#rows-that-are-allowed-to-fail
  ## ref: https://docs.travis-ci.com/user/customizing-the-build/#fast-finishing
  ##
  allow_failures: []
  fast_finish: true

  include:
    # - stage: test
    #   name: python-package
    #   script:
    #     - pytest -m "not auth_test" --log-cli-level=10 -vsx --cov binderhub
    #   env:
    #     - INSTALL_BINDERHUB_OUTSIDE_K8S=1
  
    # - stage: test
    #   name: python-package-auth
    #   script:
    #     - pytest -m "auth_test" --log-cli-level=10 -vsx --cov binderhub
    #   env:
    #     - INSTALL_BINDERHUB_OUTSIDE_K8S=1

    - stage: test
      name: helm-chart
      script:
        # Build our images if needed and update values.yaml with the tags
        - (cd ./helm-chart && chartpress)

        # Install BinderHub
        - helm dependency update ./helm-chart/binderhub
        - |-
            helm install binderhub ./helm-chart/binderhub \
              --values ./helm-chart/dev-config.yaml \
              --set-string config.GitHubRepoProvider.access_token=${GITHUB_ACCESS_TOKEN}

        # Await jupyterhub, autohttps setup, and binderhub
        - await_jupyterhub
        - await_autohttps_tls_cert_acquisition
        - await_binderhub

        - pytest -m "remote" --log-cli-level=10 -vsx --cov binderhub
      env:
        # PyTest tests running on the VM needs these
        - BINDER_URL=https://local.jovyan.org:30443
        - HUB_URL=https://hub.local.jovyan.org:30443

    # - stage: publish
    #   name: publish
    #   script:
    #     - ci/publish
    #   env:
    #     # Environment variables that TravisCI will decrypt when pushing to the
    #     # master branch: DOCKER_PASSWORD, DOCKER_USERNAME, GITHUB_ACCESS_TOKEN.
    #     - secure: BuO4oUz5YZvWhH919Tk8h3McM60NybLImIwB+0C4cmcDC/Z4uS1Jh8R8UbD3vIkJyjPgd+WuoaYGzzgJfCiS5i5TZZfi5yI0URu67fc044vaS7zSegZWsuN40mP4QNYTb+VdYniav8pqqyPyUpKNbOQ+/YJ+BWrC/ncqSL+P+UR6PE9T3TQ4XDuB45z0B2hhfDWBMpP6KtGae7YOWstIPi8ufiS76jjRzE4ziLqsOSwJRGhRbjJXqdcZeH2d54jUJSzCEGMSo5lxrFL27YOJ6Vuzr0V208AiQe60CyxtAzyiamVoE9U8pYOnv9KRDMeROSdz2HJkGetedNgCHpf0mNUWLZzQ6udzXtKeG2pxKeLDYKSm8Y3GGGa87nWRaWS1dYwCTHLe1r6Jwt6QwuBqqIa0oOMujStTEgbUOLLw5e80kSWqTxb52XnDi5SgOMGNzcylAYJLHFCL5U9ShAyZWGRAy0p7tFycXy44/k7RiqXr6Xur7NuB9bzXkmsDa7qS1t2DXoUA8FlpxfvqaSqVuFSrN16JHQeBOZGEYondQ2NPvi2vNT68Us4saWUxBf8oxF5pctbJYDDOxWpYFq/pza2+Elset9dv5KjCb61qtotLpo4PER4zgvde5/5HRa1CAOJlVfZB1Au3+b1NoVWNnPcwlb2UGut1+bcaDWyPf20=
    #     - secure: uqQrm6T6oGloQIHs1tLtQm3iIZFUtv1lNgtT+oCfYw3MC1CJ5AkKRaClAcVlFVOoCAE1GeCbnkob0i+LkwE+FQ1uw0fH9QyGx0PiEBrT3ilOXtkHvLXzcB/8PqPnIRR+vQnqigX2wsfiy0po99gBeaKiQjfybZ8UVp03M7+peQ4Y/Dxoj0G0nYZPsCo4F5plfdalJQX+ZVi1QlkglTotVxvb8QjrxXUrJ3OgXyVgW5fmkrRY6rWlb7RkSPlxmOhOZ7KM0BghMvox2VAD2jTatW/IEjqqaek8VqyKe1Dhw8wRUwQIwAH0VV1tUslHGcPcpbosGTPsfH7pTSUIa6ZRWd2dymMCpp7NwmFPm38QOZS/psiYNFPM6FvQnyqmtiUiU9MfcwMNJxiAUyTSslficd1Lt/aTTgBJQnK9Zd+/J6uuSc1aMGSgVNaM6eXxyNITXqz067zn8apCJm6UUEVM5FFs5SdfNXycJeV7qBwT8oe2+lvC4YzB2bHVGlnynK4IBPZsSFiBxPTBhcHVZp2FIMoC7cm/2dKW0gKPMho2Glhb7Zxn0mFej7XrT+IllD4yCjYSuSG2hpNMgE0+pc/89F2eLtey+oRAH0p4+K8DXsVCHsb7rSq+i7WDtFhFR0DBRWPG8B//CyLSbr4UoKumShbXYCI1dpSYzATmVyphQc8=
    #     - secure: ugOe1mIyit6BmzuTLtzVM7+edswAES1TfAnGST0EkYv341z0NnqRGdRJYtH1q1rRoZ6ciSnjHdVe8zmentxDwRJSi50888ro8EG7NnvAjG31cdwEgm7Vdv4sEbt7Dp8gYxKb5kWtt9w4IxPdMocpWPeNBmjctX+7QWwvIJZstWDjOtt8BhDufiTTHeiZR3FTNy5ykJXnFXn/WMsZoxI/a3GAgSzV4wKu0OzZYYk3GY20inJKUwxwWgyNbzQXecWlup6REd+YYrq0h4hJESyrtTQwHsijssCuy+mH8fxPpPZuF2WtHAqej0zGVKyUU/xmpCgdIHbjsheIyEE1leYn+USuoWqiHf0gjx2sYvBJP4HizJNPgj67UUNcUfGXzjegy6cDZE8iXW5clDRDkmWgx53VFlVgWV0TgdxtmOFK3IpQVOoaWc4q0e4T+/38rmUiBFnbbEep2q1wwjZojYhyaIrsEG9jOhtLW2rTADc5fdXURYqfPpubM1SCTseT43T86sRfOH3x8o9MSDnVejZ317oPfoZyqrL/FwpW45M68v/RAfvb6mY/5vM7Jw+70trgz4RhLQS55nuqnZ7NwK8ooX27YnvVnx3YisADz1Cf/A/bNixj8pVkJ7TTw/TnR/gTzat2wfsgPTWRtC8hhOyLSFnZh3J5OyeHQQMmdPspilE=
