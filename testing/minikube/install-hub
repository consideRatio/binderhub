#!/usr/bin/env python3
"""
Script to install jupyterhub helm chart with minikube

for testing binderhub

Gets the jupyterhub chart version from the binderhub helm chart
to ensure we are testing against a reasonable version.
"""
import sys
import os
import pipes
from subprocess import check_call, check_output
import time

from kubernetes import client, config
from ruamel import yaml
from tempfile import NamedTemporaryFile

auth_enabled = '--auth' in sys.argv

# Deploying BinderHub normally automatically deploys JupyterHub from the same
# configuration file.
# In the CI tests JupyterHub is configured independently, so extract the
# JupyterHub config from the BinderHub helm chart values.yaml
tmp = NamedTemporaryFile(suffix='.yaml', delete=False)
tmp.close()
jupyterhub_values_yaml = tmp.name
with open(values_yaml) as valuesin:
    jupyterhub_values = yaml.safe_load(valuesin)['jupyterhub']
    with open(jupyterhub_values_yaml, 'w') as valuesout:
        yaml.safe_dump(jupyterhub_values, valuesout)

# launch with helm install (or upgrade, if already installed)
args = [
    'jupyterhub/jupyterhub',
    f'--version={jupyterhub["version"]}',
    f'--namespace={namespace}',
    '-f', jupyterhub_values_yaml,
    '-f', os.path.join(here, 'jupyterhub-helm-config.yaml'),
]
if auth_enabled:
    print('\nAuthentication is enabled')
    auth_conf_file = os.path.join(here, 'jupyterhub-helm-auth-config.yaml')
    args.extend(['-f', auth_conf_file])

is_running = name in check_output(['helm', 'list', '-q']).decode('utf8', 'replace').split()
if is_running:
    cmd = ['helm', 'upgrade', name]
else:
    cmd = ['helm', 'install', f'--name={name}']

cmd.extend(args)
print("\n    %s\n" % ' '.join(map(pipes.quote, cmd)))

check_call(cmd)



os.remove(jupyterhub_values_yaml)
